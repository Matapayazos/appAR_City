{
  "version": 3,
  "file": "angular-calendar-week-hours-view.umd.min.js",
  "sources": [
    "ng://angular-calendar-week-hours-view/out/src/app/modules/calendar-week-hours-view/calendar-week-hours-view.component.ts",
    "ng://angular-calendar-week-hours-view/out/src/app/modules/calendar-week-hours-view/calendar-week-hours-view-event.component.ts",
    "ng://angular-calendar-week-hours-view/out/src/app/modules/calendar-week-hours-view/calendar-week-hours-day-view.component.ts",
    "ng://angular-calendar-week-hours-view/out/src/app/modules/calendar-week-hours-view/calendar-week-hours-day-view-hour-segment.component.ts",
    "ng://angular-calendar-week-hours-view/out/src/app/modules/calendar-week-hours-view/calendar-week-hours-view-header.component.ts",
    "ng://angular-calendar-week-hours-view/out/src/app/modules/calendar-week-hours-view/calendar-week-hours-view.module.ts"
  ],
  "sourcesContent": [
    "import {\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    LOCALE_ID,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    TemplateRef\n} from '@angular/core';\nimport {CalendarEvent, DayViewHour, DayViewHourSegment, WeekDay, WeekViewEvent, WeekViewEventRow} from 'calendar-utils';\nimport {Subject} from 'rxjs/Subject';\nimport {ResizeEvent} from 'angular-resizable-element';\nimport {addDays} from 'date-fns';\nimport {Subscription} from 'rxjs/Subscription';\nimport {CalendarEventTimesChangedEvent, CalendarUtils} from 'angular-calendar';\nimport {WeekViewEventResize} from 'angular-calendar/modules/week/calendar-week-view.component';\nimport {validateEvents} from 'angular-calendar/modules/common/util';\nimport {CalendarResizeHelper} from 'angular-calendar/modules/common/calendar-resize-helper.provider';\nimport {CalendarDragHelper} from 'angular-calendar/modules/common/calendar-drag-helper.provider';\n\n@Component({\n    selector: 'iq-calendar-week-hours-view',\n    template: `\n        <div class=\"cal-week-hours-view\" #weekViewContainer>\n            <iq-calendar-week-hours-view-header\n                [days]=\"days\"\n                [locale]=\"locale\"\n                [customTemplate]=\"headerTemplate\"\n                (dayHeaderClicked)=\"dayHeaderClicked.emit($event)\"\n                (eventDropped)=\"eventTimesChanged.emit($event)\">\n            </iq-calendar-week-hours-view-header>\n            <div class=\"cal-days-container\">\n                <div class=\"cal-day-container\">\n                    <div class=\"cal-day-view\">\n                        <div class=\"cal-hour-rows\">\n                            <div class=\"cal-events\">\n                                <div class=\"cal-hour\"\n                                     [class.cal-week-hour-even]=\"i % 2 === 0\"\n                                     [class.cal-week-hour-odd]=\"i % 2 === 1\"\n                                     *ngFor=\"let hour of hours; let i = index\">\n                                    <iq-calendar-week-hours-day-view-hour-segment\n                                        *ngFor=\"let segment of hour.segments\"\n                                        [style.height.px]=\"hourSegmentHeight\"\n                                        [segment]=\"segment\"\n                                        [segmentHeight]=\"hourSegmentHeight\"\n                                        [locale]=\"locale\"\n                                        [customTemplate]=\"hourSegmentTemplate\"\n                                        [class.cal-drag-over]=\"segment.dragOver\"\n                                        mwlDroppable\n                                        (dragEnter)=\"segment.dragOver = true\"\n                                        (dragLeave)=\"segment.dragOver = false\"\n                                        (drop)=\"segment.dragOver = false; eventDropped($event, segment)\">\n                                    </iq-calendar-week-hours-day-view-hour-segment>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"cal-day-container\"\n                     [class.cal-past]=\"day.isPast\"\n                     [class.cal-today]=\"day.isToday\"\n                     [class.cal-future]=\"day.isFuture\"\n                     *ngFor=\"let day of days\">\n                    <iq-calendar-week-hours-day-view [dayStartHour]=\"dayStartHour\"\n                                                     [dayStartMinute]=\"dayStartMinute\"\n                                                     [dayEndHour]=\"dayEndHour\"\n                                                     [dayEndMinute]=\"dayEndMinute\"\n                                                     [events]=\"events\"\n                                                     [viewDate]=\"day.date\"\n                                                     [hourSegments]=\"hourSegments\"\n                                                     [hourSegmentHeight]=\"hourSegmentHeight\"\n                                                     [eventWidth]=\"(weekViewContainer.offsetWidth / 8)\"\n                                                     (eventClicked)=\"eventClicked.emit($event)\"\n                                                     (hourSegmentClicked)=\"hourSegmentClicked.emit($event)\"\n                                                     (eventTimesChanged)=\"eventTimesChanged.emit($event)\"\n                                                     [eventTitleTemplate]=\"eventTitleTemplate\"\n                                                     [eventTemplate]=\"eventTemplate\">\n                    </iq-calendar-week-hours-day-view>\n                </div>\n            </div>\n        </div>\n    `\n})\nexport class CalendarWeekHoursViewComponent implements OnChanges, OnInit, OnDestroy {\n    /**\n     * The current view date\n     */\n    @Input() viewDate: Date;\n\n    /**\n     * An array of events to display on view\n     * The schema is available here:\n     * https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n     */\n    @Input() events: CalendarEvent[] = [];\n\n    /**\n     * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view\n     */\n    @Input() excludeDays: number[] = [];\n\n    /**\n     * An observable that when emitted on will re-render the current view\n     */\n    @Input() refresh: Subject<any>;\n\n    /**\n     * The locale used to format dates\n     */\n    @Input() locale: string;\n\n    /**\n     * The placement of the event tooltip\n     */\n    @Input() tooltipPlacement = 'bottom';\n\n    /**\n     * A custom template to use for the event tooltips\n     */\n    @Input() tooltipTemplate: TemplateRef<any>;\n\n    /**\n     * Whether to append tooltips to the body or next to the trigger element\n     */\n    @Input() tooltipAppendToBody = true;\n\n    /**\n     * The start number of the week\n     */\n    @Input() weekStartsOn: number;\n\n    /**\n     * A custom template to use to replace the header\n     */\n    @Input() headerTemplate: TemplateRef<any>;\n\n    /**\n     * A custom template to use for week view events\n     */\n    @Input() eventTemplate: TemplateRef<any>;\n\n    /**\n     * A custom template to use for event titles\n     */\n    @Input() eventTitleTemplate: TemplateRef<any>;\n\n    /**\n     * The precision to display events.\n     * `days` will round event start and end dates to the nearest day and `minutes` will not do this rounding\n     */\n    @Input() precision: 'days' | 'minutes' = 'days';\n\n    /**\n     * An array of day indexes (0 = sunday, 1 = monday etc) that indicate which days are weekends\n     */\n    @Input() weekendDays: number[];\n\n    /**\n     * The day start hours in 24 hour time. Must be 0-23\n     */\n    @Input() dayStartHour = 0;\n\n    /**\n     * The day start minutes. Must be 0-59\n     */\n    @Input() dayStartMinute = 0;\n\n    /**\n     * The day end hours in 24 hour time. Must be 0-23\n     */\n    @Input() dayEndHour = 23;\n\n    /**\n     * The day end minutes. Must be 0-59\n     */\n    @Input() dayEndMinute = 59;\n\n    /**\n     * The number of segments in an hour. Must be <= 6\n     */\n    @Input() hourSegments = 2;\n\n    /**\n     * The height in pixels of each hour segment\n     */\n    @Input() hourSegmentHeight = 30;\n\n    /**\n     * A custom template to use to replace the hour segment\n     */\n    @Input() hourSegmentTemplate: TemplateRef<any>;\n\n    /**\n     * Called when a header week day is clicked.\n     * Adding a `cssClass` property on `$event.day` will add that class to the header element\n     */\n    @Output()\n    dayHeaderClicked: EventEmitter<{ day: WeekDay }> = new EventEmitter<{\n        day: WeekDay;\n    }>();\n\n    /**\n     * Called when the event title is clicked\n     */\n    @Output()\n    eventClicked: EventEmitter<{ event: CalendarEvent }> = new EventEmitter<{\n        event: CalendarEvent;\n    }>();\n\n    /**\n     * Called when an hour segment is clicked\n     */\n    @Output()\n    hourSegmentClicked: EventEmitter<{ date: Date }> = new EventEmitter<{\n        date: Date;\n    }>();\n\n    /**\n     * Called when an event is resized or dragged and dropped\n     */\n    @Output()\n    eventTimesChanged: EventEmitter<CalendarEventTimesChangedEvent> = new EventEmitter<CalendarEventTimesChangedEvent>();\n\n    /**\n     * An output that will be called before the view is rendered for the current week.\n     * If you add the `cssClass` property to a day in the header it will add that class to the cell element in the template\n     */\n    @Output()\n    beforeViewRender: EventEmitter<{ header: WeekDay[] }> = new EventEmitter();\n\n    /**\n     * @hidden\n     */\n    hours: DayViewHour[] = [];\n\n    /**\n     * @hidden\n     */\n    days: WeekDay[];\n\n    /**\n     * @hidden\n     */\n    eventRows: WeekViewEventRow[] = [];\n\n    /**\n     * @hidden\n     */\n    refreshSubscription: Subscription;\n\n    /**\n     * @hidden\n     */\n    currentResizes: Map<WeekViewEvent, WeekViewEventResize> = new Map();\n\n    /**\n     * @hidden\n     */\n    validateDrag: (args: any) => boolean;\n\n    /**\n     * @hidden\n     */\n    validateResize: (args: any) => boolean;\n\n    /**\n     * @hidden\n     */\n    dayColumnWidth: number;\n\n    /**\n     * @hidden\n     */\n    constructor(private cdr: ChangeDetectorRef,\n                private utils: CalendarUtils,\n                @Inject(LOCALE_ID) locale: string) {\n        this.locale = locale;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit(): void {\n        if (this.refresh) {\n            this.refreshSubscription = this.refresh.subscribe(() => {\n                this.refreshAll();\n                this.cdr.markForCheck();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: any): void {\n        if (changes.viewDate || changes.excludeDays || changes.weekendDays) {\n            this.refreshHeader();\n        }\n\n        if (changes.events) {\n            validateEvents(this.events);\n        }\n\n        if (changes.events || changes.viewDate || changes.excludeDays) {\n            this.refreshBody();\n        }\n\n        if (\n            changes.viewDate ||\n            changes.dayStartHour ||\n            changes.dayStartMinute ||\n            changes.dayEndHour ||\n            changes.dayEndMinute\n        ) {\n            this.refreshHourGrid();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void {\n        if (this.refreshSubscription) {\n            this.refreshSubscription.unsubscribe();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    resizeStarted(weekViewContainer: HTMLElement,\n                  weekEvent: WeekViewEvent,\n                  resizeEvent: ResizeEvent): void {\n        this.currentResizes.set(weekEvent, {\n            originalOffset: weekEvent.offset,\n            originalSpan: weekEvent.span,\n            edge: typeof resizeEvent.edges.left !== 'undefined' ? 'left' : 'right'\n        });\n        this.dayColumnWidth = this.getDayColumnWidth(weekViewContainer);\n        const resizeHelper: CalendarResizeHelper = new CalendarResizeHelper(\n            weekViewContainer,\n            this.dayColumnWidth\n        );\n        this.validateResize = ({rectangle}) =>\n            resizeHelper.validateResize({rectangle});\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    resizing(weekEvent: WeekViewEvent,\n             resizeEvent: ResizeEvent,\n             dayWidth: number): void {\n        const currentResize: WeekViewEventResize = this.currentResizes.get(\n            weekEvent\n        );\n\n        if (resizeEvent.edges.left) {\n            const diff: number = Math.round(+resizeEvent.edges.left / dayWidth);\n            weekEvent.offset = currentResize.originalOffset + diff;\n            weekEvent.span = currentResize.originalSpan - diff;\n        } else if (resizeEvent.edges.right) {\n            const diff: number = Math.round(+resizeEvent.edges.right / dayWidth);\n            weekEvent.span = currentResize.originalSpan + diff;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    resizeEnded(weekEvent: WeekViewEvent): void {\n        const currentResize: WeekViewEventResize = this.currentResizes.get(\n            weekEvent\n        );\n\n        let daysDiff: number;\n        if (currentResize.edge === 'left') {\n            daysDiff = weekEvent.offset - currentResize.originalOffset;\n        } else {\n            daysDiff = weekEvent.span - currentResize.originalSpan;\n        }\n\n        weekEvent.offset = currentResize.originalOffset;\n        weekEvent.span = currentResize.originalSpan;\n\n        let newStart: Date = weekEvent.event.start;\n        let newEnd: Date = weekEvent.event.end;\n        if (currentResize.edge === 'left') {\n            newStart = addDays(newStart, daysDiff);\n        } else if (newEnd) {\n            newEnd = addDays(newEnd, daysDiff);\n        }\n\n        this.eventTimesChanged.emit({newStart, newEnd, event: weekEvent.event});\n        this.currentResizes.delete(weekEvent);\n    }\n\n    /**\n     * @hidden\n     */\n    eventDragged(weekEvent: WeekViewEvent,\n                 draggedByPx: number,\n                 dayWidth: number): void {\n        const daysDragged: number = draggedByPx / dayWidth;\n        // TODO - remove this check once https://github.com/mattlewis92/angular-draggable-droppable/issues/21 is fixed\n        if (daysDragged !== 0) {\n            const newStart: Date = addDays(weekEvent.event.start, daysDragged);\n            let newEnd: Date;\n            if (weekEvent.event.end) {\n                newEnd = addDays(weekEvent.event.end, daysDragged);\n            }\n\n            this.eventTimesChanged.emit({newStart, newEnd, event: weekEvent.event});\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    getDayColumnWidth(eventRowContainer: HTMLElement): number {\n        return Math.floor(eventRowContainer.offsetWidth / this.days.length);\n    }\n\n    /**\n     * @hidden\n     */\n    dragStart(weekViewContainer: HTMLElement, event: HTMLElement): void {\n        this.dayColumnWidth = this.getDayColumnWidth(weekViewContainer);\n        const dragHelper: CalendarDragHelper = new CalendarDragHelper(\n            weekViewContainer,\n            event\n        );\n        this.validateDrag = ({x, y}) =>\n            this.currentResizes.size === 0 && dragHelper.validateDrag({x, y});\n        this.cdr.markForCheck();\n    }\n\n    private refreshHeader(): void {\n        this.days = this.utils.getWeekViewHeader({\n            viewDate: this.viewDate,\n            weekStartsOn: this.weekStartsOn,\n            excluded: this.excludeDays,\n            weekendDays: this.weekendDays\n        });\n        this.beforeViewRender.emit({\n            header: this.days\n        });\n    }\n\n    private refreshBody(): void {\n        this.eventRows = this.utils.getWeekView({\n            events: this.events,\n            viewDate: this.viewDate,\n            weekStartsOn: this.weekStartsOn,\n            excluded: this.excludeDays,\n            precision: this.precision,\n            absolutePositionedEvents: true\n        }).eventRows;\n    }\n\n    private refreshHourGrid(): void {\n        this.hours = this.utils.getDayViewHourGrid({\n            viewDate: this.viewDate,\n            hourSegments: this.hourSegments,\n            dayStart: {\n                hour: this.dayStartHour,\n                minute: this.dayStartMinute\n            },\n            dayEnd: {\n                hour: this.dayEndHour,\n                minute: this.dayEndMinute\n            }\n        });\n    }\n\n    private refreshAll(): void {\n        this.refreshHeader();\n        this.refreshBody();\n        this.refreshHourGrid();\n    }\n\n    eventDropped(dropEvent: { dropData?: { event?: CalendarEvent } },\n                 segment: DayViewHourSegment): void {\n        if (dropEvent.dropData && dropEvent.dropData.event) {\n            this.eventTimesChanged.emit({\n                event: dropEvent.dropData.event,\n                newStart: segment.date\n            });\n        }\n    }\n}\n",
    "import {Component, EventEmitter, Input, Output, TemplateRef} from '@angular/core';\nimport {WeekViewEvent} from 'calendar-utils';\n\n@Component({\n  selector: 'iq-calendar-week-hours-view-event',\n  template: `\n    <ng-template\n      #defaultTemplate\n      let-weekEvent=\"weekEvent\"\n      let-tooltipPlacement=\"tooltipPlacement\"\n      let-eventClicked=\"eventClicked\"\n      let-tooltipTemplate=\"tooltipTemplate\"\n      let-tooltipAppendToBody=\"tooltipAppendToBody\">\n      <div\n        class=\"cal-event\"\n        [style.backgroundColor]=\"weekEvent.event.color.secondary\"\n        [mwlCalendarTooltip]=\"weekEvent.event.title | calendarEventTitle:'weekTooltip':weekEvent.event\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipEvent]=\"weekEvent.event\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipAppendToBody]=\"tooltipAppendToBody\">\n        <mwl-calendar-event-actions [event]=\"weekEvent.event\"></mwl-calendar-event-actions>\n        <mwl-calendar-event-title\n          [event]=\"weekEvent.event\"\n          [customTemplate]=\"eventTitleTemplate\"\n          view=\"week\"\n          (mwlClick)=\"eventClicked.emit()\">\n        </mwl-calendar-event-title>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        weekEvent: weekEvent,\n        tooltipPlacement: tooltipPlacement,\n        eventClicked: eventClicked,\n        tooltipTemplate: tooltipTemplate,\n        tooltipAppendToBody: tooltipAppendToBody\n      }\">\n    </ng-template>\n  `\n})\nexport class CalendarWeekHoursViewEventComponent {\n  @Input() weekEvent: WeekViewEvent;\n\n  @Input() tooltipPlacement: string;\n\n  @Input() tooltipAppendToBody: boolean;\n\n  @Input() customTemplate: TemplateRef<any>;\n\n  @Input() eventTitleTemplate: TemplateRef<any>;\n\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() eventClicked: EventEmitter<any> = new EventEmitter();\n}\n",
    "import {\n    ChangeDetectorRef, Component, EventEmitter, Inject, Input, LOCALE_ID, OnChanges, OnDestroy, OnInit, Output,\n    TemplateRef\n} from '@angular/core';\nimport {CalendarEvent, DayView, DayViewEvent, DayViewHour, DayViewHourSegment} from 'calendar-utils';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {ResizeEvent} from 'angular-resizable-element';\nimport {addMinutes} from 'date-fns';\nimport {CalendarEventTimesChangedEvent, CalendarUtils} from 'angular-calendar';\nimport {validateEvents} from 'angular-calendar/modules/common/util';\nimport {CalendarResizeHelper} from 'angular-calendar/modules/common/calendar-resize-helper.provider';\nimport {CalendarDragHelper} from 'angular-calendar/modules/common/calendar-drag-helper.provider';\n\n/**\n * @hidden\n */\nconst MINUTES_IN_HOUR = 60;\n\n/**\n * @hidden\n */\nexport interface DayViewEventResize {\n    originalTop: number;\n    originalHeight: number;\n    edge: string;\n}\n\n/**\n * Shows all events on a given day. Example usage:\n *\n * ```typescript\n * <mwl-calendar-day-view\n *  [viewDate]=\"viewDate\"\n *  [events]=\"events\">\n * </mwl-calendar-day-view>\n * ```\n */\n@Component({\n    selector: 'iq-calendar-week-hours-day-view',\n    template: `\n        <div class=\"cal-day-view\" #dayViewContainer>\n            <mwl-calendar-all-day-event\n                *ngFor=\"let event of view.allDayEvents\"\n                [event]=\"event\"\n                [customTemplate]=\"allDayEventTemplate\"\n                [eventTitleTemplate]=\"eventTitleTemplate\"\n                (eventClicked)=\"eventClicked.emit({event: event})\">\n            </mwl-calendar-all-day-event>\n            <div class=\"cal-hour-rows\">\n                <div class=\"cal-events\">\n                    <div\n                        #event\n                        *ngFor=\"let dayEvent of view?.events\"\n                        class=\"cal-event-container\"\n                        [class.cal-draggable]=\"dayEvent.event.draggable\"\n                        [class.cal-starts-within-day]=\"!dayEvent.startsBeforeDay\"\n                        [class.cal-ends-within-day]=\"!dayEvent.endsAfterDay\"\n                        [ngClass]=\"dayEvent.event.cssClass\"\n                        mwlResizable\n                        [resizeEdges]=\"{top: dayEvent.event?.resizable?.beforeStart, bottom: dayEvent.event?.resizable?.afterEnd}\"\n                        [resizeSnapGrid]=\"{top: eventSnapSize, bottom: eventSnapSize}\"\n                        [validateResize]=\"validateResize\"\n                        (resizeStart)=\"resizeStarted(dayEvent, $event, dayViewContainer)\"\n                        (resizing)=\"resizing(dayEvent, $event)\"\n                        (resizeEnd)=\"resizeEnded(dayEvent)\"\n                        mwlDraggable\n                        [dragAxis]=\"{x: false, y: dayEvent.event.draggable && currentResizes.size === 0}\"\n                        [dragSnapGrid]=\"{y: eventSnapSize}\"\n                        [validateDrag]=\"validateDrag\"\n                        (dragStart)=\"dragStart(event, dayViewContainer)\"\n                        (dragEnd)=\"eventDragged(dayEvent, $event.y)\"\n                        [style.marginTop.px]=\"dayEvent.top\"\n                        [style.height.px]=\"dayEvent.height\"\n                        [style.marginLeft.px]=\"dayEvent.left\"\n                        [style.width.px]=\"dayEvent.width - 1\">\n                        <mwl-calendar-day-view-event\n                            [dayEvent]=\"dayEvent\"\n                            [tooltipPlacement]=\"tooltipPlacement\"\n                            [tooltipTemplate]=\"tooltipTemplate\"\n                            [tooltipAppendToBody]=\"tooltipAppendToBody\"\n                            [customTemplate]=\"eventTemplate\"\n                            [eventTitleTemplate]=\"eventTitleTemplate\"\n                            (eventClicked)=\"eventClicked.emit({event: dayEvent.event})\">\n                        </mwl-calendar-day-view-event>\n                    </div>\n                    <div class=\"cal-hour\"\n                         [class.cal-week-hour-even]=\"i % 2 === 0\"\n                         [class.cal-week-hour-odd]=\"i % 2 === 1\"\n                         *ngFor=\"let hour of hours; let i = index\">\n                        <iq-calendar-week-hours-day-view-hour-segment\n                            *ngFor=\"let segment of hour.segments\"\n                            [hourVisible]=\"false\"\n                            [style.height.px]=\"hourSegmentHeight\"\n                            [segment]=\"segment\"\n                            [segmentHeight]=\"hourSegmentHeight\"\n                            [locale]=\"locale\"\n                            [customTemplate]=\"hourSegmentTemplate\"\n                            (mwlClick)=\"hourSegmentClicked.emit({date: segment.date})\"\n                            [class.cal-drag-over]=\"segment.dragOver\"\n                            mwlDroppable\n                            (dragEnter)=\"segment.dragOver = true\"\n                            (dragLeave)=\"segment.dragOver = false\"\n                            (drop)=\"segment.dragOver = false; eventDropped($event, segment)\">\n                        </iq-calendar-week-hours-day-view-hour-segment>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    `\n})\nexport class CalendarWeekHoursDayViewComponent\n    implements OnChanges, OnInit, OnDestroy {\n    /**\n     * The current view date\n     */\n    @Input() viewDate: Date;\n\n    /**\n     * An array of events to display on view\n     * The schema is available here:\n     * https://github.com/mattlewis92/calendar-utils/blob/c51689985f59a271940e30bc4e2c4e1fee3fcb5c/src/calendarUtils.ts#L49-L63\n     */\n    @Input() events: CalendarEvent[] = [];\n\n    /**\n     * The number of segments in an hour. Must be <= 6\n     */\n    @Input() hourSegments = 2;\n\n    /**\n     * The height in pixels of each hour segment\n     */\n    @Input() hourSegmentHeight = 30;\n\n    /**\n     * The day start hours in 24 hour time. Must be 0-23\n     */\n    @Input() dayStartHour = 0;\n\n    /**\n     * The day start minutes. Must be 0-59\n     */\n    @Input() dayStartMinute = 0;\n\n    /**\n     * The day end hours in 24 hour time. Must be 0-23\n     */\n    @Input() dayEndHour = 23;\n\n    /**\n     * The day end minutes. Must be 0-59\n     */\n    @Input() dayEndMinute = 59;\n\n    /**\n     * The width in pixels of each event on the view\n     */\n    @Input() eventWidth = 150;\n\n    /**\n     * An observable that when emitted on will re-render the current view\n     */\n    @Input() refresh: Subject<any>;\n\n    /**\n     * The locale used to format dates\n     */\n    @Input() locale: string;\n\n    /**\n     * The grid size to snap resizing and dragging of events to\n     */\n    @Input() eventSnapSize: number = this.hourSegmentHeight;\n\n    /**\n     * The placement of the event tooltip\n     */\n    @Input() tooltipPlacement = 'top';\n\n    /**\n     * A custom template to use for the event tooltips\n     */\n    @Input() tooltipTemplate: TemplateRef<any>;\n\n    /**\n     * Whether to append tooltips to the body or next to the trigger element\n     */\n    @Input() tooltipAppendToBody = true;\n\n    /**\n     * A custom template to use to replace the hour segment\n     */\n    @Input() hourSegmentTemplate: TemplateRef<any>;\n\n    /**\n     * A custom template to use for all day events\n     */\n    @Input() allDayEventTemplate: TemplateRef<any>;\n\n    /**\n     * A custom template to use for day view events\n     */\n    @Input() eventTemplate: TemplateRef<any>;\n\n    /**\n     * A custom template to use for event titles\n     */\n    @Input() eventTitleTemplate: TemplateRef<any>;\n\n    /**\n     * Called when an event title is clicked\n     */\n    @Output()\n    eventClicked: EventEmitter<{ event: CalendarEvent }> = new EventEmitter<{\n        event: CalendarEvent;\n    }>();\n\n    /**\n     * Called when an hour segment is clicked\n     */\n    @Output()\n    hourSegmentClicked: EventEmitter<{ date: Date }> = new EventEmitter<{\n        date: Date;\n    }>();\n\n    /**\n     * Called when an event is resized or dragged and dropped\n     */\n    @Output()\n    eventTimesChanged: EventEmitter<CalendarEventTimesChangedEvent> = new EventEmitter<CalendarEventTimesChangedEvent>();\n\n    /**\n     * An output that will be called before the view is rendered for the current day.\n     * If you add the `cssClass` property to a segment it will add that class to the hour segment in the template\n     */\n    @Output()\n    beforeViewRender: EventEmitter<{ body: DayViewHour[] }> = new EventEmitter();\n\n    /**\n     * @hidden\n     */\n    hours: DayViewHour[] = [];\n\n    /**\n     * @hidden\n     */\n    view: DayView;\n\n    /**\n     * @hidden\n     */\n    width = 0;\n\n    /**\n     * @hidden\n     */\n    refreshSubscription: Subscription;\n\n    /**\n     * @hidden\n     */\n    currentResizes: Map<DayViewEvent, DayViewEventResize> = new Map();\n\n    /**\n     * @hidden\n     */\n    validateDrag: (args: any) => boolean;\n\n    /**\n     * @hidden\n     */\n    validateResize: (args: any) => boolean;\n\n    /**\n     * @hidden\n     */\n    constructor(private cdr: ChangeDetectorRef,\n                private utils: CalendarUtils,\n                @Inject(LOCALE_ID) locale: string) {\n        this.locale = locale;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit(): void {\n        if (this.refresh) {\n            this.refreshSubscription = this.refresh.subscribe(() => {\n                this.refreshAll();\n                this.cdr.markForCheck();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy(): void {\n        if (this.refreshSubscription) {\n            this.refreshSubscription.unsubscribe();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: any): void {\n        if (\n            changes.viewDate ||\n            changes.dayStartHour ||\n            changes.dayStartMinute ||\n            changes.dayEndHour ||\n            changes.dayEndMinute\n        ) {\n            this.refreshHourGrid();\n        }\n\n        if (changes.events) {\n            validateEvents(this.events);\n        }\n\n        if (\n            changes.viewDate ||\n            changes.events ||\n            changes.dayStartHour ||\n            changes.dayStartMinute ||\n            changes.dayEndHour ||\n            changes.dayEndMinute ||\n            changes.eventWidth\n        ) {\n            this.refreshView();\n        }\n    }\n\n    eventDropped(dropEvent: { dropData?: { event?: CalendarEvent } },\n                 segment: DayViewHourSegment): void {\n        if (dropEvent.dropData && dropEvent.dropData.event) {\n            this.eventTimesChanged.emit({\n                event: dropEvent.dropData.event,\n                newStart: segment.date\n            });\n        }\n    }\n\n    resizeStarted(event: DayViewEvent,\n                  resizeEvent: ResizeEvent,\n                  dayViewContainer: HTMLElement): void {\n        this.currentResizes.set(event, {\n            originalTop: event.top,\n            originalHeight: event.height,\n            edge: typeof resizeEvent.edges.top !== 'undefined' ? 'top' : 'bottom'\n        });\n        const resizeHelper: CalendarResizeHelper = new CalendarResizeHelper(\n            dayViewContainer\n        );\n        this.validateResize = ({rectangle}) =>\n            resizeHelper.validateResize({rectangle});\n        this.cdr.markForCheck();\n    }\n\n    resizing(event: DayViewEvent, resizeEvent: ResizeEvent): void {\n        const currentResize: DayViewEventResize = this.currentResizes.get(event);\n        if (resizeEvent.edges.top) {\n            event.top = currentResize.originalTop + +resizeEvent.edges.top;\n            event.height = currentResize.originalHeight - +resizeEvent.edges.top;\n        } else if (resizeEvent.edges.bottom) {\n            event.height = currentResize.originalHeight + +resizeEvent.edges.bottom;\n        }\n    }\n\n    resizeEnded(dayEvent: DayViewEvent): void {\n        const currentResize: DayViewEventResize = this.currentResizes.get(dayEvent);\n\n        let pixelsMoved: number;\n        if (currentResize.edge === 'top') {\n            pixelsMoved = dayEvent.top - currentResize.originalTop;\n        } else {\n            pixelsMoved = dayEvent.height - currentResize.originalHeight;\n        }\n\n        dayEvent.top = currentResize.originalTop;\n        dayEvent.height = currentResize.originalHeight;\n\n        const pixelAmountInMinutes: number =\n            MINUTES_IN_HOUR / (this.hourSegments * this.hourSegmentHeight);\n        const minutesMoved: number = pixelsMoved * pixelAmountInMinutes;\n        let newStart: Date = dayEvent.event.start;\n        let newEnd: Date = dayEvent.event.end;\n        if (currentResize.edge === 'top') {\n            newStart = addMinutes(newStart, minutesMoved);\n        } else if (newEnd) {\n            newEnd = addMinutes(newEnd, minutesMoved);\n        }\n\n        this.eventTimesChanged.emit({newStart, newEnd, event: dayEvent.event});\n        this.currentResizes.delete(dayEvent);\n    }\n\n    dragStart(event: HTMLElement, dayViewContainer: HTMLElement): void {\n        const dragHelper: CalendarDragHelper = new CalendarDragHelper(\n            dayViewContainer,\n            event\n        );\n        this.validateDrag = ({x, y}) =>\n            this.currentResizes.size === 0 && dragHelper.validateDrag({x, y});\n        this.cdr.markForCheck();\n    }\n\n    eventDragged(dayEvent: DayViewEvent, draggedInPixels: number): void {\n        const pixelAmountInMinutes: number =\n            MINUTES_IN_HOUR / (this.hourSegments * this.hourSegmentHeight);\n        const minutesMoved: number = draggedInPixels * pixelAmountInMinutes;\n        // TODO - remove this check once https://github.com/mattlewis92/angular-draggable-droppable/issues/21 is fixed\n        if (minutesMoved !== 0) {\n            const newStart: Date = addMinutes(dayEvent.event.start, minutesMoved);\n            let newEnd: Date;\n            if (dayEvent.event.end) {\n                newEnd = addMinutes(dayEvent.event.end, minutesMoved);\n            }\n            this.eventTimesChanged.emit({newStart, newEnd, event: dayEvent.event});\n        }\n    }\n\n    private refreshHourGrid(): void {\n        this.hours = this.utils.getDayViewHourGrid({\n            viewDate: this.viewDate,\n            hourSegments: this.hourSegments,\n            dayStart: {\n                hour: this.dayStartHour,\n                minute: this.dayStartMinute\n            },\n            dayEnd: {\n                hour: this.dayEndHour,\n                minute: this.dayEndMinute\n            }\n        });\n        this.beforeViewRender.emit({\n            body: this.hours\n        });\n    }\n\n    private refreshView(): void {\n        const originalDayView = this.utils.getDayView({\n            events: this.events,\n            viewDate: this.viewDate,\n            hourSegments: this.hourSegments,\n            dayStart: {\n                hour: this.dayStartHour,\n                minute: this.dayStartMinute\n            },\n            dayEnd: {\n                hour: this.dayEndHour,\n                minute: this.dayEndMinute\n            },\n            eventWidth: this.eventWidth,\n            segmentHeight: this.hourSegmentHeight\n        });\n\n        originalDayView.events.forEach((event: any) => {\n            if (event.isProcessed) {\n                return;\n            }\n            this.scaleOverlappingEvents(event.event.start, event.event.end, originalDayView.events);\n        });\n\n        this.view = originalDayView;\n    }\n\n    private scaleOverlappingEvents(startTime: Date, endTime: Date, events): void {\n        let newStartTime: Date = startTime;\n        let newEndTime: Date = endTime;\n        const overlappingEvents: DayViewEvent[] = [];\n        let maxLeft = 0;\n        events.forEach((event) => {\n            if (event.isProcessed) {\n                return;\n            }\n            if (event.event.start < startTime && event.event.end > startTime) {\n                newStartTime = event.event.start;\n            } else if (event.event.end > endTime && event.event.start < endTime) {\n                newEndTime = event.event.end;\n            } else if (event.event.end <= endTime && event.event.start >= startTime) {\n                // Nothing, but remove condition and add equals to above two for overlapping effect\n            } else {\n                return;\n            }\n            if (event.left > maxLeft) {\n                maxLeft = event.left;\n            }\n            overlappingEvents.push(event);\n        });\n        if (startTime === newStartTime && endTime === newEndTime) {\n            const divisorFactor = Math.floor(maxLeft / this.eventWidth) + 1;\n            overlappingEvents.forEach((event: any) => {\n                event.isProcessed = true;\n                event.left /= divisorFactor;\n                event.width /= divisorFactor;\n            });\n        } else {\n            this.scaleOverlappingEvents(newStartTime, newEndTime, events);\n        }\n    }\n\n    private refreshAll(): void {\n        this.refreshHourGrid();\n        this.refreshView();\n    }\n}\n",
    "import {Component, Input, TemplateRef} from '@angular/core';\nimport {DayViewHourSegment} from 'calendar-utils';\n\n@Component({\n    selector: 'iq-calendar-week-hours-day-view-hour-segment',\n    template: `\n        <ng-template\n            #defaultTemplate\n            let-segment=\"segment\"\n            let-locale=\"locale\">\n            <div\n                class=\"cal-hour-segment\"\n                [style.height.px]=\"segmentHeight\"\n                [class.cal-hour-start]=\"segment.isStart\"\n                [class.cal-after-hour-start]=\"!segment.isStart\"\n                [ngClass]=\"segment.cssClass\">\n                <div class=\"cal-time\" *ngIf=\"hourVisible\">\n                    {{ segment.date | calendarDate:'dayViewHour':locale }}\n                </div>\n            </div>\n        </ng-template>\n        <ng-template\n            [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n            [ngTemplateOutletContext]=\"{\n        segment: segment,\n        locale: locale\n      }\">\n        </ng-template>\n    `\n})\nexport class CalendarWeekHoursDayViewHourSegmentComponent {\n    @Input() segment: DayViewHourSegment;\n\n    @Input() segmentHeight: number;\n\n    @Input() locale: string;\n\n    @Input() customTemplate: TemplateRef<any>;\n\n    @Input() hourVisible = true;\n}\n",
    "import {Component, EventEmitter, Input, Output, TemplateRef} from '@angular/core';\nimport {CalendarEvent, WeekDay} from 'calendar-utils';\n\n@Component({\n    selector: 'iq-calendar-week-hours-view-header',\n    template: `\n        <ng-template\n            #defaultTemplate\n            let-days=\"days\"\n            let-locale=\"locale\"\n            let-dayHeaderClicked=\"dayHeaderClicked\"\n            let-eventDropped=\"eventDropped\">\n            <div class=\"cal-day-headers\">\n                <div class=\"cal-header\">\n                </div>\n                <div\n                    class=\"cal-header\"\n                    *ngFor=\"let day of days\"\n                    [class.cal-past]=\"day.isPast\"\n                    [class.cal-today]=\"day.isToday\"\n                    [class.cal-future]=\"day.isFuture\"\n                    [class.cal-weekend]=\"day.isWeekend\"\n                    [class.cal-drag-over]=\"day.dragOver\"\n                    [ngClass]=\"day.cssClass\"\n                    (mwlClick)=\"dayHeaderClicked.emit({day: day})\"\n                    mwlDroppable\n                    (dragEnter)=\"day.dragOver = true\"\n                    (dragLeave)=\"day.dragOver = false\"\n                    (drop)=\"day.dragOver = false; eventDropped.emit({event: $event.dropData.event, newStart: day.date})\">\n                    <b>{{ day.date | calendarDate:'weekViewColumnHeader':locale }}</b><br>\n                    <span>{{ day.date | calendarDate:'weekViewColumnSubHeader':locale }}</span>\n                </div>\n            </div>\n        </ng-template>\n        <ng-template\n            [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n            [ngTemplateOutletContext]=\"{days: days, locale: locale, dayHeaderClicked: dayHeaderClicked, eventDropped: eventDropped}\">\n        </ng-template>\n    `\n})\nexport class CalendarWeekHoursViewHeaderComponent {\n    @Input() days: WeekDay[];\n\n    @Input() locale: string;\n\n    @Input() customTemplate: TemplateRef<any>;\n\n    @Output()\n    dayHeaderClicked: EventEmitter<{ day: WeekDay }> = new EventEmitter<{\n        day: WeekDay;\n    }>();\n\n    @Output()\n    eventDropped: EventEmitter<{\n        event: CalendarEvent;\n        newStart: Date;\n    }> = new EventEmitter<{ event: CalendarEvent; newStart: Date }>();\n}\n",
    "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CalendarWeekHoursViewComponent} from './calendar-week-hours-view.component';\nimport {CalendarModule} from 'angular-calendar';\nimport {CalendarWeekHoursViewEventComponent} from './calendar-week-hours-view-event.component';\nimport {CalendarWeekHoursDayViewComponent} from './calendar-week-hours-day-view.component';\nimport {CalendarWeekHoursDayViewHourSegmentComponent} from './calendar-week-hours-day-view-hour-segment.component';\nimport {CalendarWeekHoursViewHeaderComponent} from './calendar-week-hours-view-header.component';\nimport {ResizableModule} from 'angular-resizable-element';\nimport {DragAndDropModule} from 'angular-draggable-droppable';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        CalendarModule,\n        ResizableModule,\n        DragAndDropModule\n    ],\n    declarations: [\n        CalendarWeekHoursViewComponent,\n        CalendarWeekHoursViewHeaderComponent,\n        CalendarWeekHoursViewEventComponent,\n        CalendarWeekHoursDayViewComponent,\n        CalendarWeekHoursDayViewHourSegmentComponent\n    ],\n    exports: [\n        CalendarWeekHoursViewComponent,\n        CalendarWeekHoursViewHeaderComponent,\n        CalendarWeekHoursViewEventComponent,\n        CalendarWeekHoursDayViewComponent,\n        CalendarWeekHoursDayViewHourSegmentComponent\n    ]\n})\nexport class CalendarWeekHoursViewModule {\n}\n"
  ],
  "names": [
    "CalendarWeekHoursViewComponent",
    "cdr",
    "utils",
    "locale",
    "this",
    "events",
    "excludeDays",
    "tooltipPlacement",
    "tooltipAppendToBody",
    "precision",
    "dayStartHour",
    "dayStartMinute",
    "dayEndHour",
    "dayEndMinute",
    "hourSegments",
    "hourSegmentHeight",
    "dayHeaderClicked",
    "EventEmitter",
    "eventClicked",
    "hourSegmentClicked",
    "eventTimesChanged",
    "beforeViewRender",
    "hours",
    "eventRows",
    "currentResizes",
    "Map",
    "prototype",
    "ngOnInit",
    "_this",
    "refresh",
    "refreshSubscription",
    "subscribe",
    "refreshAll",
    "markForCheck",
    "ngOnChanges",
    "changes",
    "viewDate",
    "weekendDays",
    "refreshHeader",
    "validateEvents",
    "refreshBody",
    "refreshHourGrid",
    "ngOnDestroy",
    "unsubscribe",
    "resizeStarted",
    "weekViewContainer",
    "weekEvent",
    "resizeEvent",
    "set",
    "originalOffset",
    "offset",
    "originalSpan",
    "span",
    "edge",
    "edges",
    "left",
    "dayColumnWidth",
    "getDayColumnWidth",
    "resizeHelper",
    "CalendarResizeHelper",
    "validateResize",
    "_a",
    "rectangle",
    "resizing",
    "dayWidth",
    "currentResize",
    "get",
    "diff",
    "Math",
    "round",
    "right",
    "resizeEnded",
    "daysDiff",
    "newStart",
    "event",
    "start",
    "newEnd",
    "end",
    "addDays",
    "emit",
    "delete",
    "eventDragged",
    "draggedByPx",
    "daysDragged",
    "eventRowContainer",
    "floor",
    "offsetWidth",
    "days",
    "length",
    "dragStart",
    "dragHelper",
    "CalendarDragHelper",
    "validateDrag",
    "x",
    "y",
    "size",
    "getWeekViewHeader",
    "weekStartsOn",
    "excluded",
    "header",
    "getWeekView",
    "absolutePositionedEvents",
    "getDayViewHourGrid",
    "dayStart",
    "hour",
    "minute",
    "dayEnd",
    "eventDropped",
    "dropEvent",
    "segment",
    "dropData",
    "date",
    "type",
    "Component",
    "args",
    "selector",
    "template",
    "ChangeDetectorRef",
    "CalendarUtils",
    "undefined",
    "decorators",
    "Inject",
    "LOCALE_ID",
    "Input",
    "tooltipTemplate",
    "headerTemplate",
    "eventTemplate",
    "eventTitleTemplate",
    "hourSegmentTemplate",
    "Output",
    "CalendarWeekHoursViewEventComponent",
    "customTemplate",
    "CalendarWeekHoursDayViewComponent",
    "eventWidth",
    "eventSnapSize",
    "width",
    "refreshView",
    "dayViewContainer",
    "originalTop",
    "top",
    "originalHeight",
    "height",
    "bottom",
    "dayEvent",
    "pixelsMoved",
    "minutesMoved",
    "addMinutes",
    "draggedInPixels",
    "body",
    "originalDayView",
    "getDayView",
    "segmentHeight",
    "forEach",
    "isProcessed",
    "scaleOverlappingEvents",
    "view",
    "startTime",
    "endTime",
    "newStartTime",
    "newEndTime",
    "overlappingEvents",
    "maxLeft",
    "push",
    "divisorFactor_1",
    "allDayEventTemplate",
    "CalendarWeekHoursDayViewHourSegmentComponent",
    "hourVisible",
    "CalendarWeekHoursViewHeaderComponent",
    "CalendarWeekHoursViewModule",
    "NgModule",
    "imports",
    "CommonModule",
    "CalendarModule",
    "ResizableModule",
    "DragAndDropModule",
    "declarations",
    "exports"
  ],
  "mappings": "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"
}
